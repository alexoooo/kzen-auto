// **DO NOT EDIT, CHANGES WILL BE LOST** - automatically generated by ModuleReflectionGenerator at 2020-10-22T10:01:20.886954400
package tech.kzen.auto.client.codegen

import tech.kzen.auto.common.objects.document.feature.TargetSpec
import tech.kzen.auto.common.objects.document.process.FilterSpec
import tech.kzen.auto.common.objects.document.process.PivotSpec
import tech.kzen.auto.common.paradigm.dataflow.api.input.OptionalInput
import tech.kzen.auto.common.paradigm.dataflow.api.input.RequiredInput
import tech.kzen.auto.common.paradigm.dataflow.api.output.BatchOutput
import tech.kzen.auto.common.paradigm.dataflow.api.output.OptionalOutput
import tech.kzen.auto.common.paradigm.dataflow.api.output.RequiredOutput
import tech.kzen.auto.common.paradigm.dataflow.api.output.StreamOutput
import tech.kzen.auto.server.objects.feature.ScreenshotCropper
import tech.kzen.auto.server.objects.feature.ScreenshotTaker
import tech.kzen.auto.server.objects.graph.*
import tech.kzen.auto.server.objects.process.ProcessDocument
import tech.kzen.auto.server.objects.script.DisplayValue
import tech.kzen.auto.server.objects.script.NumberLiteral
import tech.kzen.auto.server.objects.script.NumberRange
import tech.kzen.auto.server.objects.script.TextLiteral
import tech.kzen.auto.server.objects.script.browser.*
import tech.kzen.auto.server.objects.script.logic.BooleanLiteral
import tech.kzen.auto.server.objects.script.logic.DivisibleCheck
import tech.kzen.auto.server.objects.script.logic.LogicalAnd
import tech.kzen.auto.server.objects.script.logic.LogicalNot
import tech.kzen.lib.common.model.locate.ObjectLocation
import tech.kzen.lib.common.reflect.ModuleReflection
import tech.kzen.lib.common.reflect.ReflectionRegistry


@Suppress("UNCHECKED_CAST")
object KzenAutoJvmModule: ModuleReflection {
    override fun register(reflectionRegistry: ReflectionRegistry) {
reflectionRegistry.put(
    "tech.kzen.auto.server.objects.feature.ScreenshotCropper",
    listOf()
) {
    ScreenshotCropper()
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.feature.ScreenshotTaker",
    listOf()
) {
    ScreenshotTaker()
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.AccumulateSink",
    listOf("input")
) { args ->
    AccumulateSink(args[0] as RequiredInput<Any>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.AppendText",
    listOf("prefix", "suffix", "output")
) { args ->
    AppendText(args[0] as OptionalInput<Any>, args[1] as OptionalInput<Any>, args[2] as RequiredOutput<String>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.CountSink",
    listOf("input")
) { args ->
    CountSink(args[0] as RequiredInput<*>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.DivisibleFilter",
    listOf("input", "output", "divisor")
) { args ->
    DivisibleFilter(args[0] as RequiredInput<Int>, args[1] as OptionalOutput<Int>, args[2] as Int)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.IntRangeSource",
    listOf("output", "from", "to")
) { args ->
    IntRangeSource(args[0] as StreamOutput<Int>, args[1] as Int, args[2] as Int)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.PrimeFilter",
    listOf("input", "output")
) { args ->
    PrimeFilter(args[0] as RequiredInput<Int>, args[1] as OptionalOutput<Int>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.RepeatProcessor",
    listOf("input", "output", "times")
) { args ->
    RepeatProcessor(args[0] as RequiredInput<Any>, args[1] as BatchOutput<Any>, args[2] as Int)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.ReplaceProcessor",
    listOf("input", "output", "replacement")
) { args ->
    ReplaceProcessor(args[0] as RequiredInput<*>, args[1] as OptionalOutput<String>, args[2] as String)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.graph.SelectLast",
    listOf("first", "second", "output")
) { args ->
    SelectLast(args[0] as OptionalInput<Any>, args[1] as OptionalInput<Any>, args[2] as RequiredOutput<Any>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.process.ProcessDocument",
    listOf("input", "filter", "pivot")
) { args ->
    ProcessDocument(args[0] as String, args[1] as FilterSpec, args[2] as PivotSpec)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.CloseBrowser",
    listOf()
) {
    CloseBrowser()
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.FocusElement",
    listOf("target")
) { args ->
    FocusElement(args[0] as TargetSpec)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.GoTo",
    listOf("location")
) { args ->
    GoTo(args[0] as String)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.OpenBrowser",
    listOf("extensionFiles")
) { args ->
    OpenBrowser(args[0] as List<String>)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.SendEscape",
    listOf()
) {
    SendEscape()
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.VisualClick",
    listOf("target")
) { args ->
    VisualClick(args[0] as TargetSpec)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.VisualFormSubmit",
    listOf("target")
) { args ->
    VisualFormSubmit(args[0] as TargetSpec)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.browser.VisualSendKeys",
    listOf("text", "target")
) { args ->
    VisualSendKeys(args[0] as String, args[1] as TargetSpec)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.DisplayValue",
    listOf("text")
) { args ->
    DisplayValue(args[0] as ObjectLocation)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.logic.BooleanLiteral",
    listOf("value")
) { args ->
    BooleanLiteral(args[0] as Boolean)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.logic.DivisibleCheck",
    listOf("number", "divisor")
) { args ->
    DivisibleCheck(args[0] as ObjectLocation, args[1] as Double)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.logic.LogicalAnd",
    listOf("condition", "and")
) { args ->
    LogicalAnd(args[0] as ObjectLocation, args[1] as ObjectLocation)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.logic.LogicalNot",
    listOf("negate")
) { args ->
    LogicalNot(args[0] as ObjectLocation)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.NumberLiteral",
    listOf("value")
) { args ->
    NumberLiteral(args[0] as Double)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.NumberRange",
    listOf("from", "to")
) { args ->
    NumberRange(args[0] as Int, args[1] as Int)
}

reflectionRegistry.put(
    "tech.kzen.auto.server.objects.script.TextLiteral",
    listOf("value")
) { args ->
    TextLiteral(args[0] as String)
}
    }
}
